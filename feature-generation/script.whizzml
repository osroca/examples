(define (unsupervised-batch train-ds test-ds name model-type batch-type . params)
  (log-info (str "Creating " model-type " and its " batch-type))
  (try
   (let (model-params (merge (or (get params "model" false) {})
                             {"name" (str name " : " model-type)})
         batch-params (merge (or (get params "batch" false) {})
                             {"name" (str name " : " batch-type)
                              "output_dataset" true})
         model-id (create model-type train-ds model-params))
     {"train" (create batch-type train-ds model-id batch-params)
      "test" (when (and (not (empty? test-ds))
                        (= "dataset" (resource-type  test-ds)))
               (create batch-type test-ds model-id batch-params))})
   (catch e
     (log-warn "Could not create the " batch-type ": " e))))



(define (cluster-feature-gen ds-id test-ds name)
  (let (params {"model" cluster-params})
    (unsupervised-batch ds-id
                        test-ds
                        name
                        "cluster"
                        "batchcentroid"
                        params)))

(define (anomaly-feature-gen ds-id test-ds name)
  (let (params {"model" anomaly-params})
    (unsupervised-batch ds-id
                        test-ds
                        name
                        "anomaly"
                        "batchanomalyscore"
                        params)))

(define (topic-feature-gen ds-id test-ds name)
  (let (params {"model" topic-params})
    (unsupervised-batch ds-id
                        test-ds
                        name
                        "topicmodel"
                        "batchtopicdistribution"
                        params)))

(define (pca-feature-gen ds-id test-ds name)
  (let (params {"model" pca-params})
    (unsupervised-batch ds-id
                        test-ds
                        name
                        "pca"
                        "batchprojection"
                        params)))

(define (batch-output-ds res-map)
  {"train" (when (get (or res-map {}) "train" false)
             ((fetch (wait (res-map "train"))) "output_dataset_resource"))
   "test" (when (get (or res-map {}) "test" false)
            ((fetch (wait (res-map "test"))) "output_dataset_resource"))})

(define (create-output-dataset ds-list name objective-id)
  (update
   (merge-datasets (filter (lambda (n) n) ds-list)
                   {"juxtapose" true
                    "name" (str name ": Extended dataset")})
   {"objective_field" {"id" objective-id}}))

(define (feature-generation train-ds test-ds)
  (let (objective-id (dataset-get-objective-id train-ds)
        name-train (get (fetch (wait train-ds)) "name")
        name-test (get (fetch (wait test-ds)) "name")
        cluster-fields (cluster-feature-gen train-ds test-ds name-train)
        anomaly-fields (anomaly-feature-gen train-ds test-ds name-train)
        topic-fields (topic-feature-gen train-ds test-ds name-train)
        pca-fields (pca-feature-gen train-ds test-ds name-train)
        all-fields [cluster-fields anomaly-fields topic-fields pca-fields]
        all-ds (cons {"train" train-ds "test" test-ds}
                     (map batch-output-ds all-fields))
        train-datasets (map (lambda (m) (m "train")) all-ds)
        test-datasets  (map (lambda (m) (m "test")) all-ds))
    [(create-output-dataset train-datasets name-train objective-id)
     (create-output-dataset test-datasets name-test objective-id)]))

(define [extended-dataset-train extended-dataset-test]
  (feature-generation dataset-id test-dataset-id))
